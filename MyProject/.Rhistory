st[st$Population=='florida',c(1,2)]
st[st$Population=='florida',c(1,2)]
st[st$Population=='Florida',c(1,2)]
st[st$Population='Florida',c(1,2)]
st[colnames(st)=='Florida',c(1,2)]
st[colnames(st)=='Florida']
st[colnames(st)==Florida]
colnames(st)==Florida
colnames(st)
st$Area
st
st[rownames =='Florida']
st[rownames ==Florida]
rownames[Florida]
rownames[st]
rownames(st)
rownames(st) ==Florida
st[rownames(st) == 'Florida',c(1,2)]
st[st$Population<1000 && st$Income <4436,]
st[st$Population<1000 & st$Income <4436,]
st[st$Income<5000,"Illiteracy"]
st[st$Income<5000,3]
mean(st[st$Income<5000,"Illiteracy"])
mean(st[st$Income>=5000,"Illiteracy"])
# 파일 불러오기 저장
library(readxl)
read.excel('성적표')
read.excel('성적표.xlsx')
read.excel('성적표.xlsx',sheet=1)
read_excel('성적표.xlsx',sheet=1)
df$평균 <- apply(df[,3:5],margin =1,mean)
df$평균 <- apply(df[,3:5],MARGIN =1,mean)
df$평균 <- apply(df[,4:6],MARGIN =1,mean)
df <- read_excel('성적표.xlsx',sheet=1)
df$평균 <- apply(df[,4:6],MARGIN =1,mean)
df$평균균
df$평균
write.csv(df,"성적표2",row.names=F)
complete.cases(df)
complete.cases(df)
df <- airquality
complete.cases(df)
df[complete.cases(df),]
?mice
library(mice)
library(mice)
# merge
library(readxl)
df.1 <- read_excel("성적표.xlsx",sheet=1)
df.2 <- read_excel("성적표.xlsx",sheet=2)
df.1
df.2
df <- merge(df1,df2, all=T,
df
str(df)
str(df)
cbind(df.1,df.2)
df <- merge(df1,df2, all=T,
df
str(df)
str(df)
df <- cbind(df.1,df.2)
df <- merge(df1,df2, all=T,
df
df <- rbind(df.1,df.2)
df <- rbind(df.1,df.2)
df <- cbind(df.1,df.2)
df.split <- split(iris, f = iris$Species)
df.split
df.rbind <- rbind(df.split$setosa, df.split$virginica)
df.rbind
df.cbind <- cbind(df.split$setosa, df.split$virginica)
df.cbind
ord <- order(iris$Petal.Length, iris$Sepal.Length)
ord
head(iris[ord, c(3, 1)])
# [연습문제 8.1] --------------------------------------------------------
#  • state.x77 데이터셋에 대하여, 다음 R 코드를 작성하시오.
#    - Population을 기준으로 오름차순으로 정렬하시오.
#    - Income을 기준으로 내림차순으로 정렬하시오.
#    - Illiteracy를 기준으로 오름차순으로 정렬하되,
#     - 문맹률이 같은 주에 대해서는 Population의 내림차순으로 정렬하시오.
# -----------------------------------------------------------------------
df = data.frame(state.x77)
df
df['Population']
sort(df['Population'])
sort(df['Population'])
sort(df$Population)
sort(df$Income)
df <- data.frame(state.x77)
sort(df$Illiteracy,decreasing = T)
df[Pop_sort ,]
df[Pop_sort,]
# [연습문제 8.1] --------------------------------------------------------
#  • state.x77 데이터셋에 대하여, 다음 R 코드를 작성하시오.
#    - Population을 기준으로 오름차순으로 정렬하시오.
#    - Income을 기준으로 내림차순으로 정렬하시오.
#    - Illiteracy를 기준으로 오름차순으로 정렬하되,
#     - 문맹률이 같은 주에 대해서는 Population의 내림차순으로 정렬하시오.
# -----------------------------------------------------------------------
df = data.frame(state.x77)
Pop_sort <- sort(df$Population)
df[Pop_sort,]
# [연습문제 8.1] --------------------------------------------------------
#  • state.x77 데이터셋에 대하여, 다음 R 코드를 작성하시오.
#    - Population을 기준으로 오름차순으로 정렬하시오.
#    - Income을 기준으로 내림차순으로 정렬하시오.
#    - Illiteracy를 기준으로 오름차순으로 정렬하되,
#     - 문맹률이 같은 주에 대해서는 Population의 내림차순으로 정렬하시오.
# -----------------------------------------------------------------------
df = data.frame(state.x77)
Pop_sort <- sort(df$Population)
df[Pop_sort,]
sort(df$Population)
order(df$Population)
df[Pop_sort,]
Pop_order = order(df$Population)
df[Pop_sort,]
order(df$Population)
Pop_ord <- order(df$Population)
df[Pop_ord,]
df[Pop_ord,'Income']
df[Pop_ord,'Income']
# [연습문제 8.1] --------------------------------------------------------
#  • state.x77 데이터셋에 대하여, 다음 R 코드를 작성하시오.
#    - Population을 기준으로 오름차순으로 정렬하시오.
#    - Income을 기준으로 내림차순으로 정렬하시오.
#    - Illiteracy를 기준으로 오름차순으로 정렬하되,
#     - 문맹률이 같은 주에 대해서는 Population의 내림차순으로 정렬하시오.
# -----------------------------------------------------------------------
df = data.frame(state.x77)
Pop_ord <- order(df$Population)
df[Pop_ord,'Income']
# [연습문제 8.1] --------------------------------------------------------
#  • state.x77 데이터셋에 대하여, 다음 R 코드를 작성하시오.
#    - Population을 기준으로 오름차순으로 정렬하시오.
#    - Income을 기준으로 내림차순으로 정렬하시오.
#    - Illiteracy를 기준으로 오름차순으로 정렬하되,
#     - 문맹률이 같은 주에 대해서는 Population의 내림차순으로 정렬하시오.
# -----------------------------------------------------------------------
df = data.frame(state.x77)
df
df[Pop_ord,'Income']
Pop_ord <- order(df$Population)
Pop_odr
Pop_ord
df[Pop_ord,]
df[Pop_ord,]$Income
df[Pop_ord,2]
df[1,1]
df[,2]
df[,c(2,3)]
df[Pop_ord,c(2)]
df[df[Pop_ord,]]
df[,c(2,3)]
df[,2]
df[Pop_ord,]
df[Pop_ord,2]
df[Pop_ord,2:3]
sort(df$Income)
df$Income
df$`Income`
subset(df,
select = c(3))
data.frame(df$`Income`)
subset(Pop_ord,
subset(Pop_ord,
select = 2)
Pop_ord <- order(df$Population)
Pop_ord
df <- df[Pop_ord,]
subset(df,
select = 2)
mtcas$gear
mtcars$gear
# [연습문제 8.2]---------------------------------------------------------------
# • mtcars 데이터셋에 대하여, 다음 R 코드를 작성하시오.
#   - mtcars 데이터셋을 gear의 개수에 따라 그룹을 나누시오.
#     • split() 함수를 이용하여 df.split에 저장
#   - mtcars 데이터셋에서 gear의 개수가 3인 그룹과 4인 그룹을 합치시오.
#      • rbind() 함수를 이용하여 df.34에 저장
#------------------------------------------------------------------------------
str(mtcars)
split(mtcars, f=mtcars$gear)
df_gaer = data.frame(split(mtcars, f=mtcars$gear))
df_gear <- data.frame(mtcars)
split(mtcars, f=df_gear$gear)
df_gear <- split(mtcars, f=df_gear$gear)
df_gear
df_gear <- data.frame(mtcars)
df_gear
df_gear <- split(mtcars, f=df_gear$gear)
df_gear
mtcars
class(mtcars)
df_gear <- split(mtcars, f=df_gear$gear)
df_gear
df_gear$3
df_gear$3
df_gear$'3'
aggregate(df,
by = list(gear3=df_gear$'3', gear4=df_gear$'4'),
FUN = rbind)
aggregate(mtcars,
by = list(gear3=df_gear$'3', gear4=df_gear$'4'),
FUN = rbind)
df <- subset(mtcars)
df
mtcars
df <- subset(mtcars)
df
aggregate(mtcars,
by = list(gear3=df_gear$'3', gear4=df_gear$'4'),
FUN = rbind)
df_gear$'4'
df_gear$'3'
df.split
df.split$'3'
df.split$'4'
df.split <- split(mtcars, f=df_gear$gear)
df.split$'3'
df.split <- split(mtcars, f=df_split$gear)
df.split$'3'
df.split$'4'
df.split <- split(mtcars, f=df.split$gear)
df.split$'3'
df.split <- split(mtcars, f=df$gear)
df.split$'3'
df.split$'4'
df.34 <- rbind(df.split$'3', df.split$'4')
df.34
aggregate(mtcars,
by = list(gear3=df_gear$'3', gear4=df_gear$'4'),
FUN = rbind)
# [연습문제 8.3]----------------------------------------------------------------
# • airquality 데이터셋에 대하여, 다음 R 코드를 작성하시오.
#   - airquality에서 1, 2, 3, 4번 column을 추출하여 df에 저장: subset() 함수
#   - 위에서 추출한 변수에 대해 월별(Month)로 평균을 구하시오.
#     • aggregate() 함수로 mean() 함수를 범주를 Month로 하여 구할 수 있음.
#     • NA 값에 대해서는 na.rm = T로 매개변수값을 지정
#   - 위에서 추출한 변수에 대해 일별(Day)로 표준편차를 구하시오.
#     • aggregate() 함수로 sd() 함수를 적용하여 df.day 에 저장
#-------------------------------------------------------------------------------
airquality[,1:4]
# [연습문제 8.3]----------------------------------------------------------------
# • airquality 데이터셋에 대하여, 다음 R 코드를 작성하시오.
#   - airquality에서 1, 2, 3, 4번 column을 추출하여 df에 저장: subset() 함수
#   - 위에서 추출한 변수에 대해 월별(Month)로 평균을 구하시오.
#     • aggregate() 함수로 mean() 함수를 범주를 Month로 하여 구할 수 있음.
#     • NA 값에 대해서는 na.rm = T로 매개변수값을 지정
#   - 위에서 추출한 변수에 대해 일별(Day)로 표준편차를 구하시오.
#     • aggregate() 함수로 sd() 함수를 적용하여 df.day 에 저장
#-------------------------------------------------------------------------------
df <- airquality[,1:4]
df <- subset(airquality,1:4)
df <- subset(airquality,c(1:4))
df <- subset(airquality,select =1:4)
df
aggregate(df,
by=Month,
FUN = mean)
aggregate(df,
by='Month',
FUN = mean)
df
airquality
aggregate(airquality,
by=list[Month = df$Month]
FUN = mean)
aggregate(airquality,
by=list(Month = df$Month)
FUN = mean)
aggregate(airquality,
by=list(Month = airquality$Month)
FUN = mean)
aggregate(airquality,
by=list(Month = airquality$Month),
FUN = mean)
aggregate(airquality,
by=list(Month = airquality$Month),
FUN = mean(na,rm=T))
aggregate(df,
aggregate(df,
aggregate(df,
by=list(Month = airquality$Month),
FUN = mean)
a <- aggregate(df,
a
a <- aggregate(df,
by=list(Month = airquality$Month),
FUN = mean)
a
airquality_aggr <- aggregate(df,
by=list(Month = airquality$Month),
FUN = mean)
airquality_aggr <- aggregate(df,
by=list(Month = airquality$Month),
FUN = mean,
na.rm = TRUE)
airquality_aggr
df.day <- aggregate(df,
by=list(Day=airquality$Day),
FUN = sd)
df.day
df.day <- aggregate(df,
by=list(Day=airquality$Day),
FUN = sd,
na.rm= T)
df.day
df.day <- aggregate(df,
by=list(Day=airquality$Day),
FUN = sd,
na.rm= True)
df.day
df.day <- aggregate(df,
by=list(Day=airquality$Day),
FUN = sd,
na.rm= TRUE)
df.day
df.day <- aggregate(df,
by=list(Day=airquality$Day),
FUN = sd)
df.day
df.day <- aggregate(df,
by=list(Day=airquality$Day),
FUN = sd,
na.rm= TRUE)
df.day
install.packages("languageserver")
install.packages("httpgd")
install.packages("vscdebugger")
install.packages("vscdebuggers")
install.packages("vsc-debugger")
install.packages("vscDebugger")
install.packages("vscdebugger")
#[팔머 펭귄 분석] -------------------------------------------------
library(palmerpenguin)
#[팔머 펭귄 분석] -------------------------------------------------
install.packages("palmerpenguin")
library(palmerpenguin)
#[팔머 펭귄 분석] -------------------------------------------------
install.packages("palmerpenguins")
library(palmerpenguins)
df <- data.frame('penguins')
table(df$islands)
table(df$island)
df
df <- data.frame('penguin')
df
df <- data.frame(penguin)
df <- data.frame('palmerpenguins')
table(df$island)
df
penguin
penguins
df <- data.frame('penguins')
table(df$island)
df
penguins
df <- penguins
table(df$island)
table(df$island，df$species)
table(df$islands，df$species)
library(gmodels)
install.packages('gmodels')
library(gmodels)
CrossTable(df$island,df$species,
prop.t = F, Prop.chisq =F)
?CroosTable
library(psych)
install.packages(psych)
library(psych)
?CrossTable
install.packages('psych')
library(psych)
library(ggplot)
library(ggplot2)
library(ggplot2)
install.packages('ggplot2')
aggregate(df[,3:6],
by=list(species = df$species),
FUM=mean)
aggregate(df[,3:6],
by=list(species = df$species),
FUN=mean)
aggregate(df[,3:6],
by=list(species = df$species),
FUN=mean,
na.rm=T)
tapply(df$bill_length_mm,
INDEX = list(species = df$species),
FUN=mean,
na.rm=T)
tapply(df$bill_depth_mm,
INDEX = list(species = df$species),
FUN=mean,
na.rm=T)
boxplot(flipper_length_mm~species,
data=df, col=2:4)
str(df)
boxplot.stats(df$flipper_length_mm)
df[df$flipper_length_mm == boxplot.stats(df$flipper_length_mm)]
df[df$flipper_length_mm == boxplot.stats(df$flipper_length_mm)$outer]
df[df$flipper_length_mm == boxplot.stats(df$flipper_length_mm)$out]
df[df$flipper_length_mm == boxplot.stats(df$flipper_length_mm)$out,]
df[df$flipper_length_mm == boxplot.stats(df$flipper_length_mm),]
df[,df$flipper_length_mm == boxplot.stats(df$flipper_length_mm)]
outlier <- boxplot.stats(df$flipper_length_mm[df$species=='Adelie'])
df[df$flipper_length_mm %in% outlier]
outlier <- boxplot.stats(df$flipper_length_mm[df$species=='Adelie'])
df[df$flipper_length_mm %in% outlier]
adelie <- split(df, df$species)$Adelie
adelie
outlier <- boxplot.stats(adelie)$ouut
outlier
outlier <- boxplot.stats(adelie$flipper_length_mm)$ouut
outlier
df[df$species=='Adelie']
df[df$species==Adelie]
df[df$species=='Adelie',]
outlier <- boxploot.stats(adelie$flipper_length_mm)
outlier <- boxplot.stats(adelie$flipper_length_mm)
outlier
outlier <- boxplot.stats(adelie$flipper_length_mm)$outer
outlier
outlier
outlier <- boxplot.stats(adelie$flipper_length_mm)$out
outlier
df[df$flipper_length_mm %in% outlier,]
result <- df[df$flipper_length_mm %in% outlier,]
dim(result)
?stats
df <- na.omit(penguins)
df <- data.frame(df)
ord <- order(df$flipper_length_mm, df$body_mass_g)
ord
df[ord,]
df_ord <- df[ord,]
colnames(df_ord) <- NULL
df_ord
rownames(df_ord) <- NULL
df_ord
df <- na.omit(penguins)
df <- data.frame(df)
ord <- order(df$flipper_length_mm, df$body_mass_g)
ord
df_ord <- df[ord,]
rownames(df_ord) <- NULL
df_ord
df_ord <- df[ord,5:6]
head(df_ord,n=10)
rownames(df_ord) <- NULL
df_ord
df_head <- head(df_ord,n=10)
df_head <- head(df_ord,n=10)
rownames(df_ord) <- NULL
df_head
tinytex::install_tinytex()
---
title: "Penguins Dataset Analysis Report"
# 종구분전
plot(pg$bill_length_mm,pg$bill_depth_mm,pch=19)
cor(pg$bill_length_mm,pg$bill_depth_mm)
# 결측치 제거
library(VIM)
knitr::opts_chunk$set(echo = TRUE)
penguins
class(penguins)
df <- data.frame(penguins)
df
plot(df$bill_length_mm)
plot(df$bill_length_mm,pch=19)
plot(df$bill_length_mm,pch=18)
plot(df$bill_length_mm,pch=18)
plot(df$bill_length_mm,pch=19)
my.color <- ifelse(pg$species=='Gentoo','tomato',ifelse(pg$species=="Adelie",'steelblue','orange'))
plot(df$bill_length_mm,pch=19,col=my.color)
plot(df$bill_length_mm,df$bill_depth_mmpch=19,col=my.color)
plot(df$bill_length_mm,df$bill_depth_mm,pch=19,col=my.color)
plot(df$bill_length_mm,df$bill_depth_mm,pch=19)
plot(df$bill_length_mm,df$bill_depth_mm,pch=19,col=my.color)
str(df)
str(df$species)
split(species))
split(df$species))
split(df$species)
split(df,df$species)
split(df,df$species)
plot(df$bill_length_mm,df$bill_depth_mm,pch=19)
plot(df$bill_length_mm,df$bill_depth_mm,pch=19,col=my.color)
plot(df$bill_length_mm,df$bill_depth_mm,pch=19,col=as.numeric(df$species+1))
plot(df$bill_length_mm,df$bill_depth_mm,pch=19,col=as.numeric(df$species)+1)
my.color <- ifelse(pg$species=='Gentoo','tomato',ifelse(pg$species=="Adelie",'steelblue','orange'))
plot(df$bill_length_mm,df$bill_depth_mm,pch=19,col=my.color)
plot(df$bill_length_mm,df$bill_depth_mm,pch=19,col=as.numeric(df$species)+1)
plot(df$bill_depth_mm~df$bill_length_mm, data=df,pch=19, color=as.numeric(df$species)+1)
plot(df$bill_depth_mm~df$bill_length_mm, data=df,pch=19, col=as.numeric(df$species)+1)
plot(df$bill_length_mm,df$bill_depth_mm,pch=19,col=as.numeric(df$species)+1)
plot(df$bill_depth_mm~df$bill_length_mm, data=df,pch=19, col=as.numeric(df$species)+1)
plot(df$bill_length_mm,df$bill_depth_mm,pch=19,col='tomato')
df <- data.frame(penguins)
split(df,df$species)
plot(df$bill_length_mm,df$bill_depth_mm,pch=19,col='tomato')
my.color <- ifelse(pg$species=='Gentoo','tomato',ifelse(pg$species=="Adelie",'steelblue','orange'))
plot(df$bill_length_mm,df$bill_depth_mm,pch=19,col=my.color)
plot(df$bill_length_mm,df$bill_depth_mm,pch=19,col=as.numeric(df$species)+1)
plot(df$bill_depth_mm~df$bill_length_mm, data=df,pch=19, col=as.numeric(df$species)+1)
install.packages('palmerpenguins')
install.packages("palmerpenguins")
knitr::opts_chunk$set(echo = TRUE)
library(palmerpenguins)
