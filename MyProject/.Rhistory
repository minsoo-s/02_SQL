hist(pg$bill_depth_mm)
hist(pg$flipper_length_mm)
hist(pg$body_mass_g)
par(mfrow = c(1,1))
par(mfrow = c(1,4))
hist(pg$bill_length_mmm , col =1:3)
par(mfrow = c(1,4))
hist(pg$bill_length_mmm , col =1:3)
par(mfrow = c(2,2))
hist(pg$bill_length_mmm , col =1:3)
hist(pg$bill_depth_mm)
hist(pg$flipper_length_mm)
hist(pg$body_mass_g)
par(mfrow = c(1,1))
hist(pg$bill_length_mmm, col =1:3)
hist(pg$bill_length_mmm, col=1:3)
par(mfrow = c(2,2))
hist(pg$bill_length_mmm, col=1:3)
par(mfrow = c(2,2))
hist(pg$bill_length_mmm, col= c("orange","orange","pink"))
hist(pg$bill_depth_mm)
hist(pg$flipper_length_mm)
hist(pg$body_mass_g)
par(mfrow = c(1,1))
plot(pt$bill_length_mm,pg$bill_depth_mm)
plot(pt$bill_length_mm,pg$bill_depth_mm,pch19)
plot(pt$bill_length_mm,pg$bill_depth_mm,pch19,col="tomato")
plot(pg$bill_length_mm,pg$bill_depth_mm,pch19,col="tomato")
plot(pg$bill_length_mm,pg$bill_depth_mm,pch=19,col="tomato")
cor(pg$bill_length_mm,pg$bill_depth_mm)
hist(pg$bill_length_mm, col= c("orange","orange","pink"))
hist(pg$bill_length_mm, col= c= 1:3)
par(mfrow = c(2,2))
hist(pg$bill_length_mm, col= c= 1:3)
hist(pg$bill_depth_mm)
hist(pg$flipper_length_mm)
hist(pg$body_mass_g)
par(mfrow = c(1,1))
par(mfrow = c(2,2))
hist(pg$bill_length_mm, col= 1:3)
hist(pg$bill_depth_mm)
hist(pg$flipper_length_mm)
hist(pg$body_mass_g)
par(mfrow = c(1,1))
plot(pg$bill_length_mm,pg$bill_depth_mm,pch=19,col="tomato")
cor(pg$bill_length_mm,pg$bill_depth_mm)
# 종구분(color)
my.color <- ifelse(pg$species=='Gentoo','tomato',ifelse(pg$species=="Adelie",'steelblue','orange'))
plot(pg$bill_length_mm,pg$bill_depth_mm,pch=19,col=my.color)
cor(pg$bill_length_mm,pg$bill_depth_mm)
# 종구분전
plot(pg$bill_length_mm,pg$bill_depth_mm,pch=19)
plot(pg$bill_length_mm,pg$bill_depth_mm,pch=19,col=my.color)
cor(pg[pg$species =='Adelie',]$bill_length_mm,
pg[pg$species =='Adelie',]$bill_length_mm)
cor(pg[pg$species =='Adelie',]$bill_length_mm,
pg[pg$species =='Adelie',]$bill_depth_mm)
#install.packages("VIM")
library(VIM)
class(boxplot.stats(st$Income)
boxplot.stats(st$Income)
class(boxplot.stats(st$Income)
boxplot.stats(st$Income)$out
st[st$Income==boxplot.stats(st$Income)$out,]
df=iris
boxplot(df$Petal.Length, col ="skyblue")
boxplot(Petal.Width~Species,data = iris,pch=19,
col ="orange", border ="brown")
boxplot(df$Petal.Width~df$Species,pch=19,
col ="orange", border ="brown")
a = boxplot(Petal.Length ~ Species, data = iris,
col = "steelblue")
boxplot(df$Petal.Length~df$Species)$out
#---------------------------------------------------------
a = boxplot(Petal.Length ~ Species, data = iris,
col = "steelblue")
# Petal.Width가 네번째 컬럼
outlier <- boxplot.stats(iris[iris$Species =="setosa", 4])$out
outlier
# Petal.Width == 0.5 or 0.6 을 확인하고 싶은 것
iris[iris$Petal.Width == outlier,]
iris[iris$Petal.Width %in% outlier,]
# subset-----------------------------------------
st <- data.frame(state.x77)
colnames(st)
# 인구가 가장 많은 지역의 문맹률, 졸업률
st[st$Population == max(st$Population),c(3,6)]
subset(st,
subset = st$Population == max(st$Population),
select = c(3,6))
set <- iris[iris$Species =='setosa',]
vrs <- iris[iris$Species =='versicolor',]
vrg <- iris[iris$Species =='virsinica',]
# split: 위 경우 한번에 할 수 있는 방법
sp <- split(iris, f= iris$Species)
length(sp)
names(sp)
class(sp)
# 줄어듬 iris[iris$Species =='setosa',]->sp$setosa
sp$setosa
sp$versicolor
sp$virginica
dim(sp$setosa)
dim(sp$versicolor)
# 다시 합치고 싶은 경우
# rbind:행을 기준
df.2 <- rbind(sp$setosa, sp$versicolor)
dim(df.2)
iris[, 1:2]
iris[, 3:4]
# cbind: 열을 기준
df.3 <- cbind(iris[,1:2],iris[,3:4])
dim(df.3)
str(df.3)
# merge
library(readxl)
df.1 <- read_excel("성적표.xlsx",sheet=1)
df.2 <- read_excel("성적표.xlsx",sheet=2)
df.1
df.2
cbind(df.1,df.2)
df <- merge(df1,df2, all=T,
by.y = c("No","name")
colnames(df)[6] <- c('no',
# aggregate:집계 --------------------------------------------------------------
df <- iris
aggregate(df[,-5],
by = list(품종=df$Species),
FUN = mean)
aggregate(df[,-5],
by = list(품종=df$Species),
FUN =sd)
library(MASS)
data("survey")
df <- survey
str(df)
df<-na.omit(df) #None 행 제거 ???
df <- df[complete.cases(df),]
dim(df)
hist(df$Height, breaks = 20)
hist(df[df$Sex =='Male',]$Height, breaks = 20)
hist(df[df$Sex =='Female',]$Height, breaks = 20)
mean(df[df$Sex =='Male',]$Height, breaks = 20)
mean(df[df$Sex =='Female',]$Height, breaks = 20)
aggregate(df[,c(10,12)],
by = list(Gender = df$Sex),
FUN = mean)
table(df$Sex)
# A ~ B: A값을 B를 기준으로
t.test(Height ~ Sex, data =df)
boxplot(Height ~ Sex, data = df,
col = c("orange","tomato"))
# sort: 정렬 / order: 정렬 후 인덱스 위치를 알려줌
v <-  c(30,50,20,40,10)
v
sort(v)
st <- data.frame(state.x77)
st <- data.frame(state.x77)
boxplot.stats(st$Income)
class(boxplot.stats(st$Income)
boxplot.stats(st$Income)$out
boxplot(st$Income)$out
#   - st 데이터 프레임의 변수와 관측값의 개수는?
#      - 각 주별 소득(Income)의 평균은?
#      - 인구(Population)가 10,000보다 큰 주의 인구, 소득은?
#      - Florida 주의 인구와 소득은?
# • rownames(st) 는 st 각 주의 이름 벡터를 리턴한다.
#   - 인구가 1,000보다 작고, 소득이 4,436보다 작은 주의 모든 정보를 출력하라.
#   - 문맹률(Illiteracy)의 평균을
# • 소득이 5,000보다 작은 주에 대해서 구하라.
# • 소득이 5,000보다 큰 주에 대해서 구하라.
#--------------------------------------------------------------------------
st <- data.frame(state.x77)
str(st)
dim(st)
# 주별 소득 평균/ 인구가 10000보다 큰 주의 인구,소득 / florida 인구,소득
st$Income
# 주별 소득 평균/ 인구가 10000보다 큰 주의 인구,소득 / florida 인구,소득
mean(st$Income)
st[st$Population>10000,'Population']
st[st$Population>10000,('Population','Income')]
st[st$Population>10000,['Population','Income']]
st[st$Population>10000,c(1,2)]
st[st$Population=='florida',c(1,2)]
st[st$Population=='florida',c(1,2)]
st[st$Population=='Florida',c(1,2)]
st[st$Population='Florida',c(1,2)]
st[colnames(st)=='Florida',c(1,2)]
st[colnames(st)=='Florida']
st[colnames(st)==Florida]
colnames(st)==Florida
colnames(st)
st$Area
st
st[rownames =='Florida']
st[rownames ==Florida]
rownames[Florida]
rownames[st]
rownames(st)
rownames(st) ==Florida
st[rownames(st) == 'Florida',c(1,2)]
st[st$Population<1000 && st$Income <4436,]
st[st$Population<1000 & st$Income <4436,]
st[st$Income<5000,"Illiteracy"]
st[st$Income<5000,3]
mean(st[st$Income<5000,"Illiteracy"])
mean(st[st$Income>=5000,"Illiteracy"])
# 파일 불러오기 저장
library(readxl)
read.excel('성적표')
read.excel('성적표.xlsx')
read.excel('성적표.xlsx',sheet=1)
read_excel('성적표.xlsx',sheet=1)
df$평균 <- apply(df[,3:5],margin =1,mean)
df$평균 <- apply(df[,3:5],MARGIN =1,mean)
df$평균 <- apply(df[,4:6],MARGIN =1,mean)
df <- read_excel('성적표.xlsx',sheet=1)
df$평균 <- apply(df[,4:6],MARGIN =1,mean)
df$평균균
df$평균
write.csv(df,"성적표2",row.names=F)
complete.cases(df)
complete.cases(df)
df <- airquality
complete.cases(df)
df[complete.cases(df),]
?mice
library(mice)
library(mice)
# merge
library(readxl)
df.1 <- read_excel("성적표.xlsx",sheet=1)
df.2 <- read_excel("성적표.xlsx",sheet=2)
df.1
df.2
df <- merge(df1,df2, all=T,
df
str(df)
str(df)
cbind(df.1,df.2)
df <- merge(df1,df2, all=T,
df
str(df)
str(df)
df <- cbind(df.1,df.2)
df <- merge(df1,df2, all=T,
df
df <- rbind(df.1,df.2)
df <- rbind(df.1,df.2)
df <- cbind(df.1,df.2)
df.split <- split(iris, f = iris$Species)
df.split
df.rbind <- rbind(df.split$setosa, df.split$virginica)
df.rbind
df.cbind <- cbind(df.split$setosa, df.split$virginica)
df.cbind
ord <- order(iris$Petal.Length, iris$Sepal.Length)
ord
head(iris[ord, c(3, 1)])
# [연습문제 8.1] --------------------------------------------------------
#  • state.x77 데이터셋에 대하여, 다음 R 코드를 작성하시오.
#    - Population을 기준으로 오름차순으로 정렬하시오.
#    - Income을 기준으로 내림차순으로 정렬하시오.
#    - Illiteracy를 기준으로 오름차순으로 정렬하되,
#     - 문맹률이 같은 주에 대해서는 Population의 내림차순으로 정렬하시오.
# -----------------------------------------------------------------------
df = data.frame(state.x77)
df
df['Population']
sort(df['Population'])
sort(df['Population'])
sort(df$Population)
sort(df$Income)
df <- data.frame(state.x77)
sort(df$Illiteracy,decreasing = T)
df[Pop_sort ,]
df[Pop_sort,]
# [연습문제 8.1] --------------------------------------------------------
#  • state.x77 데이터셋에 대하여, 다음 R 코드를 작성하시오.
#    - Population을 기준으로 오름차순으로 정렬하시오.
#    - Income을 기준으로 내림차순으로 정렬하시오.
#    - Illiteracy를 기준으로 오름차순으로 정렬하되,
#     - 문맹률이 같은 주에 대해서는 Population의 내림차순으로 정렬하시오.
# -----------------------------------------------------------------------
df = data.frame(state.x77)
Pop_sort <- sort(df$Population)
df[Pop_sort,]
# [연습문제 8.1] --------------------------------------------------------
#  • state.x77 데이터셋에 대하여, 다음 R 코드를 작성하시오.
#    - Population을 기준으로 오름차순으로 정렬하시오.
#    - Income을 기준으로 내림차순으로 정렬하시오.
#    - Illiteracy를 기준으로 오름차순으로 정렬하되,
#     - 문맹률이 같은 주에 대해서는 Population의 내림차순으로 정렬하시오.
# -----------------------------------------------------------------------
df = data.frame(state.x77)
Pop_sort <- sort(df$Population)
df[Pop_sort,]
sort(df$Population)
order(df$Population)
df[Pop_sort,]
Pop_order = order(df$Population)
df[Pop_sort,]
order(df$Population)
Pop_ord <- order(df$Population)
df[Pop_ord,]
df[Pop_ord,'Income']
df[Pop_ord,'Income']
# [연습문제 8.1] --------------------------------------------------------
#  • state.x77 데이터셋에 대하여, 다음 R 코드를 작성하시오.
#    - Population을 기준으로 오름차순으로 정렬하시오.
#    - Income을 기준으로 내림차순으로 정렬하시오.
#    - Illiteracy를 기준으로 오름차순으로 정렬하되,
#     - 문맹률이 같은 주에 대해서는 Population의 내림차순으로 정렬하시오.
# -----------------------------------------------------------------------
df = data.frame(state.x77)
Pop_ord <- order(df$Population)
df[Pop_ord,'Income']
# [연습문제 8.1] --------------------------------------------------------
#  • state.x77 데이터셋에 대하여, 다음 R 코드를 작성하시오.
#    - Population을 기준으로 오름차순으로 정렬하시오.
#    - Income을 기준으로 내림차순으로 정렬하시오.
#    - Illiteracy를 기준으로 오름차순으로 정렬하되,
#     - 문맹률이 같은 주에 대해서는 Population의 내림차순으로 정렬하시오.
# -----------------------------------------------------------------------
df = data.frame(state.x77)
df
df[Pop_ord,'Income']
Pop_ord <- order(df$Population)
Pop_odr
Pop_ord
df[Pop_ord,]
df[Pop_ord,]$Income
df[Pop_ord,2]
df[1,1]
df[,2]
df[,c(2,3)]
df[Pop_ord,c(2)]
df[df[Pop_ord,]]
df[,c(2,3)]
df[,2]
df[Pop_ord,]
df[Pop_ord,2]
df[Pop_ord,2:3]
sort(df$Income)
df$Income
df$`Income`
subset(df,
select = c(3))
data.frame(df$`Income`)
subset(Pop_ord,
subset(Pop_ord,
select = 2)
Pop_ord <- order(df$Population)
Pop_ord
df <- df[Pop_ord,]
subset(df,
select = 2)
mtcas$gear
mtcars$gear
# [연습문제 8.2]---------------------------------------------------------------
# • mtcars 데이터셋에 대하여, 다음 R 코드를 작성하시오.
#   - mtcars 데이터셋을 gear의 개수에 따라 그룹을 나누시오.
#     • split() 함수를 이용하여 df.split에 저장
#   - mtcars 데이터셋에서 gear의 개수가 3인 그룹과 4인 그룹을 합치시오.
#      • rbind() 함수를 이용하여 df.34에 저장
#------------------------------------------------------------------------------
str(mtcars)
split(mtcars, f=mtcars$gear)
df_gaer = data.frame(split(mtcars, f=mtcars$gear))
df_gear <- data.frame(mtcars)
split(mtcars, f=df_gear$gear)
df_gear <- split(mtcars, f=df_gear$gear)
df_gear
df_gear <- data.frame(mtcars)
df_gear
df_gear <- split(mtcars, f=df_gear$gear)
df_gear
mtcars
class(mtcars)
df_gear <- split(mtcars, f=df_gear$gear)
df_gear
df_gear$3
df_gear$3
df_gear$'3'
aggregate(df,
by = list(gear3=df_gear$'3', gear4=df_gear$'4'),
FUN = rbind)
aggregate(mtcars,
by = list(gear3=df_gear$'3', gear4=df_gear$'4'),
FUN = rbind)
df <- subset(mtcars)
df
mtcars
df <- subset(mtcars)
df
aggregate(mtcars,
by = list(gear3=df_gear$'3', gear4=df_gear$'4'),
FUN = rbind)
df_gear$'4'
df_gear$'3'
df.split
df.split$'3'
df.split$'4'
df.split <- split(mtcars, f=df_gear$gear)
df.split$'3'
df.split <- split(mtcars, f=df_split$gear)
df.split$'3'
df.split$'4'
df.split <- split(mtcars, f=df.split$gear)
df.split$'3'
df.split <- split(mtcars, f=df$gear)
df.split$'3'
df.split$'4'
df.34 <- rbind(df.split$'3', df.split$'4')
df.34
aggregate(mtcars,
by = list(gear3=df_gear$'3', gear4=df_gear$'4'),
FUN = rbind)
# [연습문제 8.3]----------------------------------------------------------------
# • airquality 데이터셋에 대하여, 다음 R 코드를 작성하시오.
#   - airquality에서 1, 2, 3, 4번 column을 추출하여 df에 저장: subset() 함수
#   - 위에서 추출한 변수에 대해 월별(Month)로 평균을 구하시오.
#     • aggregate() 함수로 mean() 함수를 범주를 Month로 하여 구할 수 있음.
#     • NA 값에 대해서는 na.rm = T로 매개변수값을 지정
#   - 위에서 추출한 변수에 대해 일별(Day)로 표준편차를 구하시오.
#     • aggregate() 함수로 sd() 함수를 적용하여 df.day 에 저장
#-------------------------------------------------------------------------------
airquality[,1:4]
# [연습문제 8.3]----------------------------------------------------------------
# • airquality 데이터셋에 대하여, 다음 R 코드를 작성하시오.
#   - airquality에서 1, 2, 3, 4번 column을 추출하여 df에 저장: subset() 함수
#   - 위에서 추출한 변수에 대해 월별(Month)로 평균을 구하시오.
#     • aggregate() 함수로 mean() 함수를 범주를 Month로 하여 구할 수 있음.
#     • NA 값에 대해서는 na.rm = T로 매개변수값을 지정
#   - 위에서 추출한 변수에 대해 일별(Day)로 표준편차를 구하시오.
#     • aggregate() 함수로 sd() 함수를 적용하여 df.day 에 저장
#-------------------------------------------------------------------------------
df <- airquality[,1:4]
df <- subset(airquality,1:4)
df <- subset(airquality,c(1:4))
df <- subset(airquality,select =1:4)
df
aggregate(df,
by=Month,
FUN = mean)
aggregate(df,
by='Month',
FUN = mean)
df
airquality
aggregate(airquality,
by=list[Month = df$Month]
FUN = mean)
aggregate(airquality,
by=list(Month = df$Month)
FUN = mean)
aggregate(airquality,
by=list(Month = airquality$Month)
FUN = mean)
aggregate(airquality,
by=list(Month = airquality$Month),
FUN = mean)
aggregate(airquality,
by=list(Month = airquality$Month),
FUN = mean(na,rm=T))
aggregate(df,
aggregate(df,
aggregate(df,
by=list(Month = airquality$Month),
FUN = mean)
a <- aggregate(df,
a
a <- aggregate(df,
by=list(Month = airquality$Month),
FUN = mean)
a
airquality_aggr <- aggregate(df,
by=list(Month = airquality$Month),
FUN = mean)
airquality_aggr <- aggregate(df,
by=list(Month = airquality$Month),
FUN = mean,
na.rm = TRUE)
airquality_aggr
df.day <- aggregate(df,
by=list(Day=airquality$Day),
FUN = sd)
df.day
df.day <- aggregate(df,
by=list(Day=airquality$Day),
FUN = sd,
na.rm= T)
df.day
df.day <- aggregate(df,
by=list(Day=airquality$Day),
FUN = sd,
na.rm= True)
df.day
df.day <- aggregate(df,
by=list(Day=airquality$Day),
FUN = sd,
na.rm= TRUE)
df.day
df.day <- aggregate(df,
by=list(Day=airquality$Day),
FUN = sd)
df.day
df.day <- aggregate(df,
by=list(Day=airquality$Day),
FUN = sd,
na.rm= TRUE)
df.day
