# lst$height와 lst$weight의 평균
mean(lst$height)
# 키, 몸무게 벡터
height <- c(163,175,182,179,161)
weight <- c(65,87,74,63,51)
# 혈액형 팩터로 저장
blood <- factor(c(1,2,3,4,1),
levels = 1:4,
labels = c('A','B','AB','O'))
blood
# 원소의 이름으로 가진 리스트 lst
lst <- list(height = height , weight = weight, blood=blood)
# lst$height와 lst$weight의 평균
mean(lst$height)
mean(lst$weight)
# lst$blood의 빈도표
table(lst$blood)
# [연습문제 5.1]------------------------------------------------------
#  • 임의의 자연수 𝑛에 대하여
#   - 약수의 개수를 구하는 div.cnt() 함수를 작성하시오.
#     - 입력값: 임의의 자연수 𝑛
#     - 출력값: 𝑛의 약수의 개수
#   -1에서 15까지의 𝑛에 대해서 약수의 개수를 확인하시오.
#----------------------------------------------------------------------
div_cnt <- function(n) length((1:n)[n%%(1:n)==0])
sapply(1:15,div_cnt)
#   - 1부터 𝑛까지 소수의 개수를 리턴하는 prime.cnt() 함수를 작성하시오.
#     - 입력값: 임의의 자연수 𝑛
#     - 출력값: 1부터 𝑛까지 소수의 개수
#   - 𝑛이 10, 100, 1000, 10000, 100000일 때 소수의 개수를 확인하시오.
#     - 소수인지 판단하는 is.prime() 함수를 먼저 작성하시오.
#     - is.prime() 함수를 이용하여 prime.cnt() 함수를 작성하시오.
#   - is.prime()에서 𝑛 까지만 확인해도 됨을 확인하고,
#     - 내장 함수를 이용해서 is.prime()을 수정하시오.
#---------------------------------------------------------------------
# 소수개수 리턴 함수
prime_cnt <- function(n) sum(sapply(1:n,div.cnt)==2)
sapply(c(10,100,1000,100000),prime_cnt)
v <- c(10,20,30,40,50)
which (v > 30)
n <- 32
# n의 약수를 모두 출력
# 반복문 사용금지
d <- seq(1,32)
n
d
length(d[n%%d == 0])
# DF프레임 (행렬)애서 데이터 추출
str(iris)
View(iris)
iris[1,]
iris[1:5,]
iris[1:5,1]
iris[1:5,1:2]
iris[1:5,1:4]
iris[1:5,-5]
iris[, 1]
iris$Sepal.Length
nrow(iris[iris$Sepal.Length < 5,-5])
# 실습 : Petal.Length가 평균보다 큰 데이터의
# Petal.Width 평균값은 얼마인가?
P_L = iris$Petal.Length
cond_row = P_L > mean(P_L)
mean(iris[cond_row,4])
fun <- function (x) {
return ( x + y + 5)
}
y <- 3
fun(5)
my.fun <- function(x,y,z){
cat(x, y, z, "\n")
return(x + y*2 + z*3)
}
my.fun(z =1,2,3)
# 디폴트값 공부
head(iris[,-5], n=5)
head(iris[,-5])
hist(iris$Sepal.Length, main ='histogram',xlab='xlabel',ylab='ylabel')
divisor <- function(n) {
# to do
v <- 1:n
x <-  v[n%%v==0]
x_count <- length(x)
return (x_count)
}
sapply(c(10,100,1000,100000),prime_cnt)
sapply(1:100,div.cnt)==2
# 소수인지 판단하는 is.prime() 함수
is_prime <- function(n) div.cnt(n)==2
is_prime(3)
is_prime(4)
is_prime(5)
is_prime(6)
is_prime(7)
is_prime(9)
is_prime(13)
is_prime(11)
is_prime(17)
is_prime(18)
prime_cnt <- function(n) sum((1:n)[is_prime])
prime(10)
prime(100)
# 루트n
div_cnt <- function(n) length((1:n)[n%%(1:sqrt(n))==0])
div_cnt(100)
# 루트n
div_cnt <- function(n) length((1:sqrt(n))[n%%(1:sqrt(n))==0])
div_cnt(100)
div_cnt(100)
# 루트n
div_cnt <- function(n) length((1:sqrt(n))[sqrt(n)%%(1:sqrt(n))==0])
div_cnt(100)
# 루트n
div_cnt <- function(sqrt(n)) length((1:n)[n%%(1:n)==0])
# 루트n
div_cnt <- function(n) length((1:sqrt(n))[n%%(1:n)==0])
div_cnt(100)
# 루트n
div_cnt <- function(n) length((1:n)[n%%(1:n)==0])
div_cnt(100)
# 루트n
is_prime <- function(n) div.cnt(sqrt(n))==2
is_prime(100)
# 루트n
prime_cnt <- function(n) sum((1:sqrt(n))[is_prime])
prime_cnt(100)
prime_cnt <- function(n) sum((1:n)[is_prime])
prime_cnt(100)
# 소수인지 판단하는 is.prime() 함수
is_prime <- function(n) div.cnt(n)==2
prime_cnt <- function(n) sum((1:n)[is_prime])
prime_cnt(100)
(1:100)[is_prime]
(1:100)[is_prime(n)]
is_prime(10)
is_prime(7)
sapply(1:100,is_prime)
sum(sapply(1:100,is_prime))
prime_cnt <- function(n) sum(sapply(1:n,is_prime))
prime_cnt(100)
# 루트n
prime_cnt <- function(n) sum((1:sqrt(n))[is_prime])
prime_cnt(100)
# 루트n
prime_cnt <- function(n) sum(sapply(1:sqrt(n),is_prime))
prime_cnt(100)
# 루트n
prime_cnt <- function(n) sum(sapply(1:n,is_prime))
prime_cnt(sqrt(100))
# [연습문제 5.1]------------------------------------------------------
#  • 임의의 자연수 𝑛에 대하여
#   - 약수의 개수를 구하는 div.cnt() 함수를 작성하시오.
#     - 입력값: 임의의 자연수 𝑛
#     - 출력값: 𝑛의 약수의 개수
#   -1에서 15까지의 𝑛에 대해서 약수의 개수를 확인하시오.
#----------------------------------------------------------------------
div_cnt <- function(sqrt(n)) length((1:n)[n%%(1:n)==0])
i <- 5*5
i
# [연습문제 3.7 ]-------------------------------------------
#  • 1부터 𝑛까지의 자연수에 대하여
#   - 약수의 개수를 모두 출력하고,
#   - 약수의 개수가 가장 많은 숫자를 찾는 코드를 작성하시오.
#   - 단, 약수의 개수가 가장 많은 숫자가 여러 개이면 가장 큰 수를 찾으시오.
#   - 𝑛이 10, 100, 1000일 때 약수의 개수가 가장 많은 숫자를 확인하시오.
#-------------------------------------------------------------
# 약수 개수 찾기 함수
div.cnt <- function(n) length((1:n)[n%%(1:n)==0])
# 1~n까지 약수 개수 모두 출력 함수
div.cnt.all <- function(n) sapply(c(1:n),FUN=div.cnt)
div.cnt.all(100)
which.max(div.cnt.all(100))
max <- 0
for (i in 1:100){
if(div.cnt(max) <= div.cnt(i)){
max <- i
}
}
max
# 루트N
prime_cnt <- function(n) sum(sapply(1:n,is_prime))
# [연습문제 5.1]------------------------------------------------------
#  • 임의의 자연수 𝑛에 대하여
#   - 약수의 개수를 구하는 div.cnt() 함수를 작성하시오.
#     - 입력값: 임의의 자연수 𝑛
#     - 출력값: 𝑛의 약수의 개수
#   -1에서 15까지의 𝑛에 대해서 약수의 개수를 확인하시오.
#----------------------------------------------------------------------
div_cnt <- function(n) length((1:sqrt(n))[n%%(1:n)==0])
sapply(1:15,div_cnt)
#   - 1부터 𝑛까지 소수의 개수를 리턴하는 prime.cnt() 함수를 작성하시오.
#     - 입력값: 임의의 자연수 𝑛
#     - 출력값: 1부터 𝑛까지 소수의 개수
#   - 𝑛이 10, 100, 1000, 10000, 100000일 때 소수의 개수를 확인하시오.
#     - 소수인지 판단하는 is.prime() 함수를 먼저 작성하시오.
#     - is.prime() 함수를 이용하여 prime.cnt() 함수를 작성하시오.
#   - is.prime()에서 𝑛 까지만 확인해도 됨을 확인하고,
#     - 내장 함수를 이용해서 is.prime()을 수정하시오.
#---------------------------------------------------------------------
# 소수개수 리턴 함수
prime_cnt <- function(n) sum(sapply(1:n,div.cnt)==2)
sapply(c(10,100,1000,100000),prime_cnt)
is_prime <- function(n) div.cnt(n)==2
prime_cnt <- function(n) sum(sapply(1:n,is_prime))
prime_cnt(100)
# [연습문제 3.1]------------------------------------------------------------
# • 한 변의 길이가 𝑥인 정사각형의 넓이 𝑎𝑟𝑒𝑎를 구하는 수식을 만드시오.
#   - 𝑥가 5, 10, 15일 때 𝑎𝑟𝑒𝑎의 값을 확인해 보시오.
# • 반지름의 길이가 𝑟인 원의 둘레 𝑟𝑜𝑢𝑛𝑑와 넓이 𝑎𝑟𝑒𝑎를 구하는 수식을 만드시오.
#   - 𝑟이 5, 10, 15일 때 𝑟𝑜𝑢𝑛𝑑와 𝑎𝑟𝑒𝑎의 값을 확인해 보시오.
#---------------------------------------------------------------------------
# 함수
square_area <- function(x) x^2
# 정사각형 넓이(x =5,10,15)
sapply(c(5,10,15), FUN = square_area)
circle_area <- function(r) 3.14*(r^2)
# 원 넓이(r =5,10,15)
sapply(c(5,10,15), FUN = circle_area)
circle_round <- function(r) 2*3.14*r
# 원 둘레(r =5,10,15)
sapply(c(5,10,15), FUN = circle_round)
# 정사각형 넓이(x =5,10,15)
sapply(c(5,10,15), FUN = square_area,circle_area)
# 정사각형 넓이(x =5,10,15)
sapply(c(5,10,15), FUN = (square_area,circle_area))
# 정사각형 넓이(x =5,10,15)
sapply(c(5,10,15), FUN = ([square_area,circle_area])
# 정사각형 넓이(x =5,10,15)
sapply(c(5,10,15), FUN = (square_area)
# 정사각형 넓이(x =5,10,15)
sapply(c(5,10,15), FUN = square_area)
# 정사각형 넓이(x =5,10,15)
sapply(c(5,10,15), FUN = square_area)
# [연습문제 3.2]: 피자나라의 치킨공주----------------------------------------
# • 양의 정수 𝑛의 값에 따라 𝑜𝑟𝑑𝑒𝑟에 다른 값을 할당하시오.
#   - 𝑛이 3의 배수이면 𝑜𝑟𝑑𝑒𝑟는 “피자”
#   - 𝑛이 5의 배수이면 𝑜𝑟𝑑𝑒𝑟는 “치킨”
#   - 𝑛이 3과 5의 배수이면 𝑜𝑟𝑑𝑒𝑟는 “피자나라치킨공주”
#   - 𝑛이 그 이외의 수이면 𝑜𝑟𝑑𝑒𝑟는 “다이어트”
# • 𝑛 이 6, 10, 13, 15일 때 𝑜𝑟𝑑𝑒𝑟 의 값을 확인하시오.
# ---------------------------------------------------------------------------
PC <- function(n) {
if (n %% 15 == 0){
print('PC')
}
else if (n %% 3 == 0){
print('P')
}
else if (n %% 5 == 0){
print('C')
}
else{
print('D')
}
}
sapply(c(6,10,13,15),FUN=PC)
a <- pi
circle_area <- function(r) pi*(r^2)
# 원 넓이(r =5,10,15)
sapply(c(5,10,15), FUN = circle_area)
circle_round <- function(r) 2*pi*r
# 원 둘레(r =5,10,15)
sapply(c(5,10,15), FUN = circle_round)
# [연습문제 3.2]: 피자나라의 치킨공주----------------------------------------
# • 양의 정수 𝑛의 값에 따라 𝑜𝑟𝑑𝑒𝑟에 다른 값을 할당하시오.
#   - 𝑛이 3의 배수이면 𝑜𝑟𝑑𝑒𝑟는 “피자”
#   - 𝑛이 5의 배수이면 𝑜𝑟𝑑𝑒𝑟는 “치킨”
#   - 𝑛이 3과 5의 배수이면 𝑜𝑟𝑑𝑒𝑟는 “피자나라치킨공주”
#   - 𝑛이 그 이외의 수이면 𝑜𝑟𝑑𝑒𝑟는 “다이어트”
# • 𝑛 이 6, 10, 13, 15일 때 𝑜𝑟𝑑𝑒𝑟 의 값을 확인하시오.
# ---------------------------------------------------------------------------
PC <- function(n) {
if (n %% 15 == 0){
print('PC')
}
else if (n %% 3 == 0){
print('P')
}
else if (n %% 5 == 0){
print('C')
}
else{
print('D')
}
}
sapply(c(6,10,13,15),FUN=PC)
sapply(c(6,10,13),FUN=PC)
sapply(c(6,10,13,15),FUN=PC)
PC(15)
PC(c(6,10,13,15))
PC(6,10,13,15)
sapply(c(6,10,13,15),FUN=PC)
# 피자나라치킨공주 벡터의 생성
v <- c()
v <- c(10,20,30,40,50,60,70)
v[c(T,T,F,F,F,T,F)]
for (i in 1:15) {
if (i %% 3 == 0 && i %% 5 == 0) {
v <- c(v, 'PZ')
} else if (i %% 3 == 0) {
v <- c(v, 'P')
} else if (i %% 5 == 0) {
v <- c(v, 'C')
} else {
v <- c(v, 'D')
}
}
v
order <- ifelse( v %% 15 ==0, 'PZ',
ifelse(v %% 3 ==0, 'P',
ifelse(v %% 5 == 0, 'C','D')))
order <- function(v)  ifelse( v %% 15 ==0, 'PZ',
ifelse(v %% 3 ==0, 'P',
ifelse(v %% 5 == 0, 'C','D')))
order <- function(v)  ifelse( v %% 15 ==0, 'PZ',
ifelse(v %% 3 ==0, 'P',
ifelse(v %% 5 == 0, 'C','D')))
v <- 1:15
w <- order(v)
w
sapply(c(6,10,13,15),FUN=order)
sapply(c(6,10,13,15),FUN=PC)
cal_S2 <- function(n) (n*(n+1)/2)^2)
cal_S2 <- function(n) (n*(n+1)/2)^2)
cal_S2 <- function(n) ((n*(n+1)/2)^2)
saplly(n, cal_S2)
saplly(C(10,15,20), cal_S2)
cal_S2 <- function(n) ((n*(n+1)/2)^2)
saplly(C(10,15,20), cal_S2)
cal_S2 <- function(n) ((n*(n+1)/2)^2)
sapply(C(10,15,20), cal_S2)
sapply(c(10,15,20), cal_S2)
sapply(c(10,15,20),FUN = cal_F)
cat(i, n/i,'\n')
# 효율적인 계산
div <- function(n) {
for (i in 1:sqrt(n)){
if n(n%% i ==0)
for (i in 1:sqrt(n)){
if (n%% i ==0)
cat(i, n/i,'\n')
}
# 효율적인 계산
div <- function(n) {
for (i in 1:sqrt(n)){
if (n%% i ==0)
cat(i, n/i,'\n')
}
}
div(48)
str(df)
df <- iris # 원본데이터 보존을 위해
str(df)
class(df)
dim(df)
nrow(df)
ncol(df)
rownames(df)
head(df)
columnnames(df)
colnames(df)
v <- c(85,77,96)
v
names(v)
names(v) <- c('Kor','Eng','Math')
names(v)
v[c("Eng","Math")]
v["Kor"]
v[-c("Eng","Math")]
v <- 10:1
v
v <- -1:10
v
v <- 10:-5
v
v
df$Sepal.Length
df$Sepal.Width
df$Sepal.Width + df$Sepal.Length
df$Sepal.Sum <- df$Sepal.Width + df$Sepal.Length
f$Sepal.Sum
df$Sepal.Sum
df$Sepal.Width
df$Sepal.Sum
colname(df)
colnames(df)
head(df)
head(df[,5:6])
cond <- df$Sepal.Sum >mean(df$Sepal.Sum)
cond
df$Sepal.Sep <- ifelse(cond,"Big","Small")
df$Sepal.Sep
f <- factor(c(df$Sepal.Sep)
f <- factor(c(df$Sepal.Sep)
f <- factor(df$Sepal.Sep)
f <- factor(df$Sepal.Sep
f <- factor(df$Sepal.Sep
f <- factor(df$Sepal.Sep,
levels = 1:2,
labels = c('Big','Small'))
f
df$Sepal.Sep
factor(df$Sepal.Sep)
# 그래프
plot(f)
# 그래프
table(f)
# 팩터로 변환
f <- factor(df$Sepal.Sep)
# 테이블
table(f)
# 테이블
t_f <- table(f)
# 테이블
t_f <- table(f)
# 그래프
barplot(t_f)
?state.x77
class(state.x77)
is.data.frame(state.x77)
st <- as.data.frame(state.x77)
class(st)
str(st)
dim(st)
which.max(st)
str(st)
st$Population
which.max(st$Population)
colnames(5)
colnames(st)
colnames(st$Population)
colnames(st)
which.max(st$Income)
which.max(st$Area)
which.max(st$Population)
which.max(st$Murder)
rowname(which.max(st$Population))
rownames(which.max(st$Population))
st$Population[(which.max(st$Population))]
rownames[max(st$Population)]
rownames(which.max(st$Income))
rows(which.max(st$Income))
row(which.max(st$Income))
rownames(which.max(st$Income))
rowname(which.max(st$Income))
rownames(st)
which.max(st$Area)
st[(which.max(st$Income))
st[(which.max(st$Income),]
st[st==max(st$Murder)]
row.names()[st==max(st$Murder)]
row.names[st==max(st$Murder)]
st[st$Murder==max(st$Murder)]
st[st$Murder==max(st$Murder),]
rownames(st[st$Murder==max(st$Murder),])
write.csv(df,'my_iris.csv')
write.csv(df,'my_iris.csv', row.names=F)
write.csv(df,'my_iris.csv', row.names=F)
# 파일 불러오기
df <- read.csv("my_iris.csv")
df
# 파일 불러오기
df <- read.csv("my_iris.csv",head=T)
df
# 파일 불러오기
df <- read.csv("my_iris.csv",header=T)
df
# 파일 불러오기
df <- read.csv("my_iris.csv",header=T)
df
# 파일 불러오기
df <- read.csv("my_iris.csv",header=T)
df
# 엑셀 파일 불러오기
library(readxl)
# 엑셀 파일 불러오기
install.packages('readxl')
library(readxl)
df <- read_excel("성적표.xlsx", sheet =1)
str(df)
class(df)
st[st$Murder==max(st$Murder)
st$Murder==max(st$Murder)
st$Murder==max(st$Murder)
sd[st$Murder==max(st$Murder)]
st[st$Murder==max(st$Murder)]
st[st$Murder==max(st$Murder),]
st[2,]
str(df)
df$평균 <- apply(df[, 3:5], MARGIN =1, mean)
head(df)
df$평균 <- mean(sum(df$파이썬+df$R+df$머신러닝))
head(df)
df$평균 <- apply(df[, 3:5], MARGIN =1, mean)
head(df)
df$평균 <- sum(df$파이썬+df$R+df$머신러닝)/3
head(df)
df$평균 <- sum(df$파이썬+df$R+df$머신러닝)
head(df)
df$평균 <- (df$파이썬+df$R+df$머신러닝)
head(df)
df$평균 <- (df$파이썬+df$R+df$머신러닝)/3
head(df)
df$평균 <- apply(df[, 3:5], MARGIN =1, mean)
head(df)
# 저장
write(csv(df,"score.csv",row.names=F))
# 방법2
df$평균 <- round(apply(df[, 3:5], MARGIN =1, mean),2)
head(df)
# 저장
write.csv(df,"score.csv",row.names=F)
